syntax = "proto3";
package  game;

//4种交互方式




// request =>     客户端请求并提供callback 等待服务端响应response    client  to server
// response <=   服务端响应指定的request 请求         server to client     一对一
// notify ==>    客户端通知服务端 不需要服务端响应     client to server
// push  <===     服务端主动向客户端推送         server to client   不需要client先发起 request  主动向客户端推送
option go_package = "../gamepb;";


message Begin {
   //房间号
   uint32 roomCode=1;
   // 牌桌编号
   uint32 deskNo=2;
   // map 选择的规则 key  匹配key  uint32 具体的值   根据匹配的规则定 当匹配到 需要bool 的时候 则0 为 false  1 为true
   map<string,uint32>  rules=3;
   // map 会话编号 玩家列表信息 key 为会话对象唯一标识
   map<int64,Player> players=4;
   // 总人数
   uint32 peopleNum=5;
   // 当前轮数
   uint32 roundNum=6;
   
}

message  Player {
   //玩家座位位置
   uint32 deskPos=1;
   //  玩家编号
   uint64  uid=2;
   //  玩家昵称
   string nickname=3;
   //  玩家性别
   uint32 sex=4;
   //  头像
   string headUrl=5;
   //  玩家余额
   double score=6;

   // 玩家是否准备
   bool isReady=7;
   
   //  玩家ip地址
   // string ip=8;

   //  玩家是否离线
   bool   offline=20;
}


//   下注   每一轮结算   总结算
message PlayerSettle {
   // 房间号
   uint32 roomCode=1;
   // 牌桌编号
   uint32 deskNo=2;
    //   当前轮数
   uint32 roundNum=3;
   PlayerSettleInfo playerSettleInfos=4;
   // 是否为最后一轮   为大结算 需要对大赢家进行抽水
  bool isLastRound=7;
}

   //  单个玩家结算信息
message PlayerSettleInfo{
    //  玩家编号
   uint64  uid=1;
      //   false 减  true  加操作
   bool action =2;
    //  玩家输赢分数 正整数   根据 action 进行加减操作 
   double score=3;
}

// 每一轮的结算信息
message Settle {
   // 房间号
   uint32 roomCode=1;
   // 牌桌编号
   uint32 deskNo=2;
     //   当前轮数
  uint32 roundNum=3;
//   玩家结算信息
  repeated PlayerSettleInfo playerSettleInfos=4;
   // 是否为最后一轮   为大结算 需要对大赢家进行抽水
  bool isLastRound=7;
}



// 轮结束
message RoundOver {
   // 房间号
   uint32 roomCode=1;
   // 牌桌编号
   uint32 deskNo=2;
   // 是否为最后一轮
   bool isLastRound=3;
   //   当前轮数
   uint32 roundNum=4;
}


// 重新登陆断线重连
message ReJoin {
   // 房间号
   uint32 roomCode=1;
   // 牌桌编号
   uint32 deskNo=2;
   //  玩家编号
   uint64  uId=3;
  //   当前轮数
  uint32 roundNum=4;
   //  玩家输赢分数
   double score=6;
}

//游戏场景内重新连接
message ReConnect {
   // 房间号
   uint32 roomCode=1;
   // 牌桌编号
   uint32 deskNo=2;
   //  玩家编号
   uint64  uid=3;
}

// 玩家挂后台
message Pause {
   // 房间号
   uint32 roomCode=1;
   // 牌桌编号
   uint32 deskNo=2;
   //  玩家编号
   uint64  uid=3;
}

// 玩家切后台回来
message Resume {
   // 房间号
   uint32 roomCode=1;
   // 牌桌编号
   uint32 deskNo=2;
   //  玩家编号
   uint64  uid=3;
}

// 正常解散
message Dissolve {
   // 房间号
   uint32 roomCode=1;
   // 牌桌编号
   uint32 deskNo=2;
}

// 强制解散
message ForceDissolve {
   // 房间号
   uint32 roomCode=1;
   // 牌桌编号
   uint32 deskNo=2;
}